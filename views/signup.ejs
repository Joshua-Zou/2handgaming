<!DOCTYPE html>
<html>

<head>
    <script src="https://apis.google.com/js/platform.js?onload=renderButton"></script>
    <link rel="stylesheet" type="text/css" href="/css/Signup.css">
</head>

<body style="background-image: url(/images/signinbackground.png); width: 100%;">

    <body>
        <div class="login">
            <h1 style="text-align: center;">signup/signin</h1>
            <span style="text-align: center; color:rgb(224, 47, 47)" id="errorMessage"></span>
            <label for="login__username">email</label>
            <input type="text" id="login__username" required />
            <label for="login__password">password</label>
            <input type="password" id="login__password" required />
            <a href="#" style="text-decoration: none; color: rgb(224, 47, 47); margin-top: 10px;"
                onmousedown="showPass()" onmouseup="hidePass()">Show Password</a>
            <div class="login__section">
                <input type="checkbox" onclick="rememberMe()" id="login__remember" />
                <label for="login__remember">remember me</label>
                <a href="#" class="login__new-password" onclick="forgotpassword()">Forgot password?</a>
            </div>
            <div class="login__section-2">
                <a href="#" class="login__register login__button" onclick="register()">register</a>
                <button class="login__submit login__button" onclick="login()">login</button>
            </div>
            <div class="login__divider"></div>
            <div id="gSignInWrapper">
                <div class="login__loginwith" id="customBtn">
                    <span>login/signup with google</span>
                    <img src="https://image.flaticon.com/icons/png/512/281/281764.png" alt="google_icon" />
                </div>
            </div>
            <div class="login__loginwith"
                onclick="window.location.href='https://github.com/login/oauth/authorize?client_id=1fa55d49768487fc1d76&scope=user:email'">
                <span>login/signup with github</span>
                <img src="https://cdn1.iconfinder.com/data/icons/logotypes/32/github-512.png" alt="github_icon" />
            </div>
        </div>
    </body>
</body>

</html>
<script>
    //
    String.prototype.replaceAll = function (find, replace) {
        var regex = new RegExp(find, 'g');
        return this.replace(regex, replace)
    }
    async function login() {
        let email = document.getElementById("login__username").value;
        let password = document.getElementById("login__password").value;
        if (email.replaceAll(" ", "") === "" || password.replaceAll(" ", "") === "") { document.getElementById("errorMessage").innerText = "Email/Password field must not be blank!"; fadeError() }
        console.log(email, password);
        let returnedResult = await fetch("/api/login", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email: email, password: password })
        });
        returnedResult = await returnedResult.text();
        if (returnedResult !== "good") return document.getElementById("errorMessage").innerText = returnedResult;
        else window.location.href = "/app/dashboard";
    }
    async function register() {
        let email = document.getElementById("login__username").value;
        let password = document.getElementById("login__password").value;
        if (email.replaceAll(" ", "") === "" || password.replaceAll(" ", "") === "") { document.getElementById("errorMessage").innerText = "Email/Password field must not be blank!"; fadeError() }
        console.log(email, password);
        let returnedResult = await fetch("/api/register", {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email: email, password: password })
        });
        returnedResult = await returnedResult.text();
        if (returnedResult !== "good") { document.getElementById("errorMessage").innerText = returnedResult; fadeError() }
        else {
            alert("An email has been sent to the email address! You have to confirm your email before you can login");
            window.location.href = "/"
        }
    }

    function showPass() {
        document.getElementById("login__password").type = "text";
    }
    function hidePass() {
        document.getElementById("login__password").type = "password";
    }
    if (localStorage.getItem("rememberme") === "true") document.getElementById("login__remember").checked = true;
    function rememberMe() {
        if (!localStorage.getItem("rememberme") || localStorage.getItem("rememberme") === "false") localStorage.setItem("rememberme", "true");
        else localStorage.setItem("rememberme", "false")
    }
    async function fadeError() {
        let element = document.getElementById("errorMessage");
        for (var x = 0; x < 100; x++) {
            let opacity = 100 - x;
            element.style.opacity = opacity.toString() + "%";
            await sleep(20)
        }
        element.innerHTML = "&nbsp;";
        delete element.style.opacity;
    }
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    async function forgotpassword() {
        let email = document.getElementById("login__username").value;
        if (email.replaceAll(" ", "") === "") { document.getElementById("errorMessage").innerText = "Email field must not be blank!"; return fadeError() }

        let x = await fetch("/api/forgotpassword", {
            method: "POST",
            body: JSON.stringify({ email: email }),
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        });
        x = await x.text();
        if (x === "ok") {
            alert("An email has been sent to the connected email address!");
            window.location.href = "/";
        } else {
            document.getElementById("errorMessage").innerText = x;
            fadeError();
        }
    }
</script>


<script>
    var googleUser = {};
    var startApp = function () {
        gapi.load('auth2', function () {
            // Retrieve the singleton for the GoogleAuth library and set up the client.
            auth2 = gapi.auth2.init({
                client_id: '529338331494-cflnifocmjdd90s3n7385lfq7qjc38bf.apps.googleusercontent.com',
                cookiepolicy: 'single_host_origin',
                // Request scopes in addition to 'profile' and 'email'
                //scope: 'additional_scope'
            });
            attachSignin(document.getElementById('customBtn'));
        });
    };
    function attachSignin(element) {
        console.log(element.id);
        auth2.attachClickHandler(element, {},
            function (googleUser) {
                dorest(googleUser)
            }, function (error) {
                return;
            });
    }
    function dorest(googleUser) {
        var profile = googleUser.getBasicProfile();
        let id = profile.getId();
        console.log('ID: ' + id); // Do not send to your backend! Use an ID token instead.
        console.log('Name: ' + profile.getName());
        console.log('Image URL: ' + profile.getImageUrl());
        console.log('Email: ' + profile.getEmail()); // This is null if the 'email' scope is not present.
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/callbacks/google');
        xhr.withCredentials = true;
        xhr.setRequestHeader('Content-Type', 'application/json');
        xhr.onload = function () {
            console.log(xhr.response)
            if (xhr.response === "gotodashboard") window.location.href = "/app/dashboard";
            else replaceContent(xhr.response)
        }
        console.log(googleUser.getAuthResponse())
        xhr.send(JSON.stringify({ 'idtoken': googleUser.getAuthResponse().id_token, "requested": id, "email": profile.getEmail() }));
    };
    function replaceContent(NC) {
        document.open();
        document.write(NC);
        document.close();
    }
    startApp();
</script>